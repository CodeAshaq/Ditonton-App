// Mocks generated by Mockito 5.1.0 from annotations
// in Tv/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i20;

import 'package:core/ssl/ssl_pining.dart' as _i22;
import 'package:core/utils/failure.dart' as _i9;
import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i18;
import 'package:http/io_client.dart' as _i6;
import 'package:http/src/base_request.dart' as _i21;
import 'package:http/src/response.dart' as _i4;
import 'package:http/src/streamed_response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv/data/datasources/datasource_tv/db/database_helper_tvseries.dart' as _i16;
import 'package:tv/data/datasources/datasource_tv/tv/tv_local_datasource.dart' as _i14;
import 'package:tv/data/datasources/datasource_tv/tv/tv_remote_datasource.dart' as _i12;
import 'package:tv/data/models/models_tv/tv_detail_model.dart' as _i3;
import 'package:tv/data/models/models_tv/tv_model.dart' as _i13;
import 'package:tv/data/models/models_tv/tv_table.dart' as _i15;
import 'package:tv/domain/entities/tv/tvseries.dart' as _i10;
import 'package:tv/domain/entities/tv/tv_detail.dart' as _i11;
import 'package:tv/domain/repositories/tv/tv_repository.dart' as _i7;
import 'package:sqflite/sqflite.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeTvDetailResponse_1 extends _i1.Fake
    implements _i3.TvDetailResponse {}

class _FakeResponse_2 extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse_3 extends _i1.Fake implements _i5.StreamedResponse {
}

class _FakeIOStreamedResponse_4 extends _i1.Fake
    implements _i6.IOStreamedResponse {}

/// A class which mocks [TvRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRepository extends _i1.Mock implements _i7.TvRepository {
  MockTvRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Tv>>> getNowPlayingTv() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTv, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Tv>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Tv>>> getPopularTv() =>
      (super.noSuchMethod(Invocation.method(#getPopularTv, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Tv>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Tv>>> getTopRatedTv() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTv, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Tv>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, _i11.TvDetail>> getTvDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvDetail, [id]),
          returnValue: Future<_i2.Either<_i9.Failure, _i11.TvDetail>>.value(
              _FakeEither_0<_i9.Failure, _i11.TvDetail>())) as _i8
          .Future<_i2.Either<_i9.Failure, _i11.TvDetail>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Tv>>> getTvRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Tv>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Tv>>> searchTv(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTv, [query]),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Tv>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> saveWatchlistTv(
          _i11.TvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlistTv, [tv]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, String>> removeWatchlistTv(
          _i11.TvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTv, [tv]),
              returnValue: Future<_i2.Either<_i9.Failure, String>>.value(
                  _FakeEither_0<_i9.Failure, String>()))
          as _i8.Future<_i2.Either<_i9.Failure, String>>);
  @override
  _i8.Future<bool> isAddedToWatchlistTv(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlistTv, [id]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Tv>>> getWatchlistTv() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTv, []),
          returnValue: Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>.value(
              _FakeEither_0<_i9.Failure, List<_i10.Tv>>())) as _i8
          .Future<_i2.Either<_i9.Failure, List<_i10.Tv>>>);
}

/// A class which mocks [TvRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRemoteDataSource extends _i1.Mock
    implements _i12.TvRemoteDataSource {
  MockTvRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i13.TvModel>> getNowPlayingTv() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTv, []),
              returnValue:
                  Future<List<_i13.TvModel>>.value(<_i13.TvModel>[]))
          as _i8.Future<List<_i13.TvModel>>);
  @override
  _i8.Future<List<_i13.TvModel>> getPopularTv() => (super.noSuchMethod(
          Invocation.method(#getPopularTv, []),
          returnValue: Future<List<_i13.TvModel>>.value(<_i13.TvModel>[]))
      as _i8.Future<List<_i13.TvModel>>);
  @override
  _i8.Future<List<_i13.TvModel>> getTopRatedTv() => (super.noSuchMethod(
          Invocation.method(#getTopRatedTv, []),
          returnValue: Future<List<_i13.TvModel>>.value(<_i13.TvModel>[]))
      as _i8.Future<List<_i13.TvModel>>);
  @override
  _i8.Future<_i3.TvDetailResponse> getTvDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvDetail, [id]),
              returnValue: Future<_i3.TvDetailResponse>.value(
                  _FakeTvDetailResponse_1()))
          as _i8.Future<_i3.TvDetailResponse>);
  @override
  _i8.Future<List<_i13.TvModel>> getTvRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue:
                  Future<List<_i13.TvModel>>.value(<_i13.TvModel>[]))
          as _i8.Future<List<_i13.TvModel>>);
  @override
  _i8.Future<List<_i13.TvModel>> searchTv(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTv, [query]),
              returnValue:
                  Future<List<_i13.TvModel>>.value(<_i13.TvModel>[]))
          as _i8.Future<List<_i13.TvModel>>);
}

/// A class which mocks [TvLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvLocalDataSource extends _i1.Mock
    implements _i14.TvLocalDataSource {
  MockTvLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> insertWatchlistTv(_i15.TvTable? tv) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlistTv, [tv]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> removeWatchlistTv(_i15.TvTable? tv) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTv, [tv]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i15.TvTable?> getTvById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvById, [id]),
              returnValue: Future<_i15.TvTable?>.value())
          as _i8.Future<_i15.TvTable?>);
  @override
  _i8.Future<List<_i15.TvTable>> getWatchlistTv() => (super.noSuchMethod(
          Invocation.method(#getWatchlistTv, []),
          returnValue: Future<List<_i15.TvTable>>.value(<_i15.TvTable>[]))
      as _i8.Future<List<_i15.TvTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelperTv extends _i1.Mock implements _i16.DatabaseHelperTv {
  MockDatabaseHelperTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i17.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i17.Database?>.value())
          as _i8.Future<_i17.Database?>);
  @override
  _i8.Future<int> insertWatchlistTv(_i15.TvTable? tv) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlistTv, [tv]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> removeWatchlistTv(_i15.TvTable? tv) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTv, [tv]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<Map<String, dynamic>?> getTvById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i8.Future<Map<String, dynamic>?>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getWatchlistTv() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTv, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i18.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i20.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i20.Uint8List>.value(_i20.Uint8List(0)))
          as _i8.Future<_i20.Uint8List>);
  @override
  _i8.Future<_i5.StreamedResponse> send(_i21.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_3()))
          as _i8.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [ApiIOClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiIOClient extends _i1.Mock implements _i22.ApiIOClient {
  MockApiIOClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i6.IOStreamedResponse> send(_i21.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i6.IOStreamedResponse>.value(
                  _FakeIOStreamedResponse_4()))
          as _i8.Future<_i6.IOStreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  _i8.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i8.Future<_i4.Response>);
  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i20.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i20.Uint8List>.value(_i20.Uint8List(0)))
          as _i8.Future<_i20.Uint8List>);
}
