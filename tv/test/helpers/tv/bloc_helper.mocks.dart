// Mocks generated by Mockito 5.1.0 from annotations
// in tv/test/helpers/tv/bloc_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i20;
import 'package:core/utils/failure.dart' as _i9;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv/domain/entities/tv/tv_detail.dart' as _i16;
import 'package:tv/domain/entities/tv/tvseries.dart' as _i10;
import 'package:tv/domain/repositories/tv/tv_repository.dart' as _i2;
import 'package:tv/domain/usecases/tv/get_now_playing_tv.dart' as _i7;
import 'package:tv/domain/usecases/tv/get_popular_tv.dart' as _i11;
import 'package:tv/domain/usecases/tv/get_top_rated_tv.dart' as _i13;
import 'package:tv/domain/usecases/tv/get_tv_detail.dart' as _i15;
import 'package:tv/domain/usecases/tv/get_tv_recommendations.dart' as _i12;
import 'package:tv/domain/usecases/tv/get_watchlist_status_tv.dart' as _i17;
import 'package:tv/domain/usecases/tv/get_watchlist_tv.dart' as _i14;
import 'package:tv/domain/usecases/tv/remove_watchlist.dart' as _i19;
import 'package:tv/domain/usecases/tv/save_watchlist.dart' as _i18;
import 'package:tv/presentation/bloc/popular_tv/popular_tv_bloc.dart' as _i4;
import 'package:tv/presentation/bloc/top_rated/bloc/top_rated_tv_bloc.dart'
    as _i5;
import 'package:tv/presentation/bloc/watchlist/bloc/watchlist_tv_bloc.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTvRepository_0 extends _i1.Fake implements _i2.TvRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakePopularTvState_2 extends _i1.Fake implements _i4.PopularTvState {}

class _FakeTopRatedTvState_3 extends _i1.Fake implements _i5.TopRatedTvState {}

class _FakeWatchlistTvState_4 extends _i1.Fake implements _i6.WatchlistTvState {
}

/// A class which mocks [GetNowPlayingTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingTv extends _i1.Mock implements _i7.GetNowPlayingTv {
  MockGetNowPlayingTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>.value(
                  _FakeEither_1<_i9.Failure, List<_i10.Tv>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>);
}

/// A class which mocks [GetPopularTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularTv extends _i1.Mock implements _i11.GetPopularTv {
  MockGetPopularTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>.value(
                  _FakeEither_1<_i9.Failure, List<_i10.Tv>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>);
}

/// A class which mocks [GetTvRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvRecommendations extends _i1.Mock
    implements _i12.GetTvRecommendations {
  MockGetTvRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
              returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>.value(
                  _FakeEither_1<_i9.Failure, List<_i10.Tv>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>);
}

/// A class which mocks [GetTopRatedTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedTv extends _i1.Mock implements _i13.GetTopRatedTv {
  MockGetTopRatedTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>.value(
                  _FakeEither_1<_i9.Failure, List<_i10.Tv>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>);
}

/// A class which mocks [GetWatchlistTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTv extends _i1.Mock implements _i14.GetWatchlistTv {
  MockGetWatchlistTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>.value(
                  _FakeEither_1<_i9.Failure, List<_i10.Tv>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tv>>>);
}

/// A class which mocks [GetTvDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvDetail extends _i1.Mock implements _i15.GetTvDetail {
  MockGetTvDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i16.TvDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
              returnValue: Future<_i3.Either<_i9.Failure, _i16.TvDetail>>.value(
                  _FakeEither_1<_i9.Failure, _i16.TvDetail>()))
          as _i8.Future<_i3.Either<_i9.Failure, _i16.TvDetail>>);
}

/// A class which mocks [GetWatchListStatusTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusTv extends _i1.Mock
    implements _i17.GetWatchListStatusTv {
  MockGetWatchListStatusTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
}

/// A class which mocks [SaveWatchlistTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistTv extends _i1.Mock implements _i18.SaveWatchlistTv {
  MockSaveWatchlistTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, String>> execute(_i16.TvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i3.Either<_i9.Failure, String>>.value(
                  _FakeEither_1<_i9.Failure, String>()))
          as _i8.Future<_i3.Either<_i9.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistTv extends _i1.Mock implements _i19.RemoveWatchlistTv {
  MockRemoveWatchlistTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvRepository_0()) as _i2.TvRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, String>> execute(_i16.TvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i3.Either<_i9.Failure, String>>.value(
                  _FakeEither_1<_i9.Failure, String>()))
          as _i8.Future<_i3.Either<_i9.Failure, String>>);
}

/// A class which mocks [PopularTvBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularTvBloc extends _i1.Mock implements _i4.PopularTvBloc {
  MockPopularTvBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PopularTvState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakePopularTvState_2()) as _i4.PopularTvState);
  @override
  _i8.Stream<_i4.PopularTvState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.PopularTvState>.empty())
          as _i8.Stream<_i4.PopularTvState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i20.EventTransformer<T> debounce<T>(Duration? duration) =>
      (super.noSuchMethod(Invocation.method(#debounce, [duration]),
          returnValue: (_i8.Stream<T> events, _i20.EventMapper<T> mapper) =>
              Stream<T>.empty()) as _i20.EventTransformer<T>);
  @override
  void add(_i4.PopularTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.PopularTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i4.PopularTvState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i4.PopularTvEvent>(
          _i20.EventHandler<E, _i4.PopularTvState>? handler,
          {_i20.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i20.Transition<_i4.PopularTvEvent, _i4.PopularTvState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i20.Change<_i4.PopularTvState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TopRatedTvBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedTvBloc extends _i1.Mock implements _i5.TopRatedTvBloc {
  MockTopRatedTvBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TopRatedTvState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTopRatedTvState_3()) as _i5.TopRatedTvState);
  @override
  _i8.Stream<_i5.TopRatedTvState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.TopRatedTvState>.empty())
          as _i8.Stream<_i5.TopRatedTvState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i20.EventTransformer<T> debounce<T>(Duration? duration) =>
      (super.noSuchMethod(Invocation.method(#debounce, [duration]),
          returnValue: (_i8.Stream<T> events, _i20.EventMapper<T> mapper) =>
              Stream<T>.empty()) as _i20.EventTransformer<T>);
  @override
  void add(_i5.TopRatedTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.TopRatedTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.TopRatedTvState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.TopRatedTvEvent>(
          _i20.EventHandler<E, _i5.TopRatedTvState>? handler,
          {_i20.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i20.Transition<_i5.TopRatedTvEvent, _i5.TopRatedTvState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i20.Change<_i5.TopRatedTvState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WatchlistTvBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistTvBloc extends _i1.Mock implements _i6.WatchlistTvBloc {
  MockWatchlistTvBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WatchlistTvState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeWatchlistTvState_4()) as _i6.WatchlistTvState);
  @override
  _i8.Stream<_i6.WatchlistTvState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i6.WatchlistTvState>.empty())
          as _i8.Stream<_i6.WatchlistTvState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i20.EventTransformer<T> debounce<T>(Duration? duration) =>
      (super.noSuchMethod(Invocation.method(#debounce, [duration]),
          returnValue: (_i8.Stream<T> events, _i20.EventMapper<T> mapper) =>
              Stream<T>.empty()) as _i20.EventTransformer<T>);
  @override
  void add(_i6.WatchlistTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i6.WatchlistTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i6.WatchlistTvState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i6.WatchlistTvEvent>(
          _i20.EventHandler<E, _i6.WatchlistTvState>? handler,
          {_i20.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i20.Transition<_i6.WatchlistTvEvent, _i6.WatchlistTvState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i20.Change<_i6.WatchlistTvState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
